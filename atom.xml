<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Nineteen</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.nineteen.me/"/>
  <updated>2017-07-28T09:48:39.000Z</updated>
  <id>http://www.nineteen.me/</id>
  
  <author>
    <name>郑祯</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>AFNetworking源码——基本架构</title>
    <link href="http://www.nineteen.me/2017/07/28/AFNetworking%E6%BA%90%E7%A0%81%E2%80%94%E2%80%94%E5%9F%BA%E6%9C%AC%E6%9E%B6%E6%9E%84/"/>
    <id>http://www.nineteen.me/2017/07/28/AFNetworking源码——基本架构/</id>
    <published>2017-07-28T09:48:31.000Z</published>
    <updated>2017-07-28T09:48:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>前段时间疯狂收割了一波offer之后，也发现了很多的不足，例如很多大公司的面试官会问：你看过开源框架的源码吗，233，第一次问到还好，一次又一次被问到未免还是有些尴尬，在深深的自我反省之后，觉得自己在底层知识方面确实有欠缺，利用这段空余时间，决定开启一段源码之旅<br><a id="more"></a><br><img src="http://upload-images.jianshu.io/upload_images/2070409-c0900baaff2f2d40.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<h5 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h5><p><img src="http://upload-images.jianshu.io/upload_images/2070409-aa486acfb22ed5a3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>从上图可以发现，AFNetwoking框架是一个比较简洁的框架，主要分为了几个部分</p>
<ul>
<li>网络通信模块：NSURLSession</li>
<li>网络状态监听模块：Reachability</li>
<li>网络通信安全模块：Security</li>
<li>网络通信序列化模块：Serialization</li>
<li>对UIKit框架扩展部分：UIKit（以Catagory形式添加特性）</li>
</ul>
<p>在这几个模块中，AFNetworking的核心模块是通信模块，在通信模块中有两个类，AFHTTPSessionManager和AFURLSessionManager，其中前者继承于后者，是对HTTP的专一化封装处理。大家都知道AFNetworking 3.0其实只是对NSURLSession做了封装处理，那接下来，就从源码角度来解释这个事情，在这之前我们先来看看使用NSURLSession和使用AFNetworking做网络请求在实现过程中有什么区别</p>
<h5 id="使用区别"><a href="#使用区别" class="headerlink" title="使用区别"></a>使用区别</h5><ol>
<li><strong>使用NSURLSession进行网络请求</strong></li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">NSMutableURLRequest *request = [[NSMutableURLRequest alloc] initWithURL:[[NSURL alloc] initWithString:@&quot;https://www.nineteen.me&quot;]];</div><div class="line">NSURLSession *session = [NSURLSession sharedSession];</div><div class="line">NSURLSessionDataTask *task = [session dataTaskWithRequest:request</div><div class="line">                                       completionHandler:^(NSData * _Nullable data, NSURLResponse * _Nullable response, NSError * _Nullable error) &#123;</div><div class="line">                                           NSString *dataString = [[NSString alloc] initWithData:data encoding:NSUTF8StringEncoding];</div><div class="line">                                           NSLog(@&quot;%@&quot;, dataString);</div><div class="line">                                       &#125;];</div><div class="line">[task resume];</div></pre></td></tr></table></figure>
<ol>
<li><strong>使用AFHTTPSessionManager进行网络请求</strong></li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">AFHTTPSessionManager *manager = [[AFHTTPSessionManager alloc] initWithBaseURL:[[NSURL alloc] initWithString:@&quot;http://www.nineteen.me&quot;]];</div><div class="line">[manager GET:@&quot;2017/07/24/iOS核心动画/&quot; parameters:nil progress:nil</div><div class="line">    success:^(NSURLSessionDataTask * _Nonnull task, id  _Nullable responseObject) &#123;</div><div class="line">      // Success</div><div class="line">    &#125; failure:^(NSURLSessionDataTask * _Nullable task, NSError * _Nonnull error) &#123;</div><div class="line">      // error</div><div class="line">&#125;];</div></pre></td></tr></table></figure>
<p>可以发现使用AFHTTPSessionManager进行网络请求大致分为了两步：</p>
<ol>
<li>创建一个AFHTTPSessionManager对象</li>
<li>使用这个对象调用含有block的请求方法</li>
</ol>
<p>从调用上来看，AFNetworking的请求会更加易读和编写，接下来我们就看看这两部分在框架中是如何实现的</p>
<h5 id="内部实现"><a href="#内部实现" class="headerlink" title="内部实现"></a>内部实现</h5><ul>
<li>AFHTTPSessionManager类的架构<br><img src="http://upload-images.jianshu.io/upload_images/2070409-80614cd6298e4152.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></li>
</ul>
<p>在方法列表中，大致分为两部分，第一部分是初始化方法</p>
<ul>
<li>类初始化</li>
<li>对象初始化</li>
</ul>
<p>manager这个类初始化方法是很常用的，我们去看它的实现，发现它也是调用了自己的对象初始化方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">+ (instancetype)manager &#123;</div><div class="line">    return [[[self class] alloc] initWithBaseURL:nil];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>那我们就先来研究一下第一个部分，初始化AFHTTPSessionManager的内部实现，我们首先来看看，初始化方法的函数调用栈</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">- [AFHTTPSessionManager initWithBaseURL:]</div><div class="line">	- [AFHTTPSessionManager initWithBaseURL:sessionConfiguration:] </div><div class="line">		- [AFURLSessionManager initWithSessionConfiguration:] // #1</div><div class="line">			- [NSURLSession sessionWithConfiguration:delegate:delegateQueue:] // #2</div><div class="line">			- [AFJSONResponseSerializer serializer] </div><div class="line">			- [AFSecurityPolicy defaultPolicy] </div><div class="line">			- [AFNetworkReachabilityManager sharedManager] </div><div class="line">		- [AFHTTPRequestSerializer serializer] </div><div class="line">		- [AFJSONResponseSerializer serializer]</div></pre></td></tr></table></figure>
<ul>
<li>#1：调用了父类AFURLSessionManager的初始化方法</li>
<li>#2：调用了原生类NSURLSession的初始化方法</li>
</ul>
<p>从上面的函数调用栈可以发现，AFNetworking的内部实现到栈底仍然是操作了原生的NSURLSession，从根本上只是对原生的NSURLSession做了封装操作，封装了一些序列化、通信安全等策略，提供简洁的API，方便用户编码。</p>
<p>了解了初始化之后，我们再来看看发送请求的内部实现，在这里就用</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">GET:parameters:process:success:failure:</div></pre></td></tr></table></figure>
<p>方法作为例子来查看一下源码实现</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">- [AFHTTPSessionManager GET:parameters:process:success:failure:] </div><div class="line">	- [AFHTTPSessionManager dataTaskWithHTTPMethod:parameters:uploadProgress:downloadProgress:success:failure:] // #1 </div><div class="line">		- [AFHTTPRequestSerializer requestWithMethod:URLString:parameters:error:] // 获得NSMutableURLRequest</div><div class="line">		- [AFURLSessionManager dataTaskWithRequest:uploadProgress:downloadProgress:completionHandler:] //  #2</div><div class="line">			- [NSURLSession dataTaskWithRequest:] // #3</div><div class="line">			- [AFURLSessionManager addDelegateForDataTask:uploadProgress:downloadProgress:completionHandler:] // 添加代理</div><div class="line">				- [AFURLSessionManagerTaskDelegate init]</div><div class="line">				- [AFURLSessionManager setDelegate:forTask:]</div><div class="line">	- [NSURLSessionDataTask resume]</div></pre></td></tr></table></figure>
<ul>
<li>#1、#2、#3这三个方法得到的是同一个对象，来自#3的NSURLSessionDataTask对象</li>
</ul>
<p>从这里也能发现请求操作内部实现也是和原生NSURLSession操作一样，创建task，调用resume发送请求</p>
<h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><p>AFNetworking2.0和3.0区别很大，也是因为苹果废弃了NSURLConnection，而改用了NSURLSession，AFNetworking3.0实际上只是对NSURLSession所做的操作进行了高度封装，提供更加简洁的API供编码调用</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前段时间疯狂收割了一波offer之后，也发现了很多的不足，例如很多大公司的面试官会问：你看过开源框架的源码吗，233，第一次问到还好，一次又一次被问到未免还是有些尴尬，在深深的自我反省之后，觉得自己在底层知识方面确实有欠缺，利用这段空余时间，决定开启一段源码之旅&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>AFNetworking源码——设计思路</title>
    <link href="http://www.nineteen.me/2017/07/28/AFNetworking%E6%BA%90%E7%A0%81%E2%80%94%E2%80%94%E8%AE%BE%E8%AE%A1%E6%80%9D%E8%B7%AF/"/>
    <id>http://www.nineteen.me/2017/07/28/AFNetworking源码——设计思路/</id>
    <published>2017-07-28T09:15:58.000Z</published>
    <updated>2017-07-28T09:40:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>AFNetworking是一个非常简洁的框架，关于基本架构，可以看看<a href="http://www.jianshu.com/p/4f8333ee3879" target="_blank" rel="external">这篇文章</a>，本文主要阐述AFNetworking在设计上是如何对NSURLSession封装的。本文大致分为两个部分，第一个部分为NSURLSession的设计，第二个部分为AFNetworking的封装设计<br><a id="more"></a></p>
<h5 id="一、NSURLSession设计"><a href="#一、NSURLSession设计" class="headerlink" title="一、NSURLSession设计"></a>一、NSURLSession设计</h5><p>NSURLSession主要由这几个部分组成：</p>
<ul>
<li>NSURLSession</li>
<li>NSURLSessionTask（拥有三种子类）</li>
<li>NSURLSessionConfiguration</li>
<li>代理方法</li>
</ul>
<p>首先我们通过一段Session的使用代码来看各部分之间的关系：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">NSURLSessionConfiguration *configuration = [NSURLSessionConfiguration defaultSessionConfiguration]; // #1</div><div class="line">NSURLSession *session = [NSURLSession sessionWithConfiguration:configuration</div><div class="line">                                                      delegate:self</div><div class="line">                                                 delegateQueue:[NSOperationQueue mainQueue]]; // #2</div><div class="line">NSURLSessionDataTask *task = [session dataTaskWithURL:[[NSURL alloc]initWithString:@&quot;&quot;]]; // #3</div><div class="line">[task resume];</div></pre></td></tr></table></figure>
<p>为了方便理解这几个部分之间的关系，这段代码采用了delegate进行回调处理</p>
<ul>
<li><p><strong>#1</strong>：创建了NSURLSessionConfiguration对象，该对象的工厂模式方法提供了三种对象</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">#if FOUNDATION_SWIFT_SDK_EPOCH_AT_LEAST(8)</div><div class="line">@property (class, readonly, strong) NSURLSessionConfiguration *defaultSessionConfiguration;</div><div class="line">@property (class, readonly, strong) NSURLSessionConfiguration *ephemeralSessionConfiguration;</div><div class="line">#endif</div><div class="line"> + (NSURLSessionConfiguration *)backgroundSessionConfigurationWithIdentifier:(NSString *)identifier NS_AVAILABLE(10_10, 8_0);</div></pre></td></tr></table></figure>
<p>  以上有三种方法，下面简要介绍下每种类型的特点 </p>
<ul>
<li><strong>defaultSessionConfiguration</strong>：默认的配置，和NSURLConnection的配置类似，使用硬盘来缓存数据（不同的是NSURLConnection的配置是全局的）</li>
<li><strong>ephemeralSessionConfiguration</strong>：不会将Cookie、缓存等存储到磁盘，而是放在内存中，程序退出时数据会消失（可以用于私密浏览）</li>
<li><strong>backgroundSessionConfigurationWithIdentifier</strong>：可以在应用程序挂起、退出、崩溃的情况下运行下载和上传任务，会在后台另外开启一个线程，但是系统会根据负载程度去调度这个线程的操作，可能会造成速度缓慢或者超时</li>
</ul>
<p>三种工厂提供了三种对象具有不同的特点，除此之外，NSURLSessionConfiguration拥有很多的属性可以进行配置<br><img src="http://upload-images.jianshu.io/upload_images/2070409-03cdc1d2c3447e11.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>  这里列出一些常用属性：</p>
<ul>
<li><code>@property NSTimeInterval timeoutIntervalForRequest;</code>：请求超时</li>
<li><code>@property NSTimeInterval timeoutIntervalForResource;</code>：资源超时</li>
<li><p><code>@property (nullable, copy) NSDictionary *HTTPAdditionalHeaders;</code>：请求头，配置如下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">configuration.HTTPAdditionalHeaders = @&#123;@&quot;Accept&quot;: @&quot;application/json&quot;,</div><div class="line">                                            @&quot;Accept-Language&quot;: @&quot;en&quot;,</div><div class="line">                                            @&quot;Accept-Encoding&quot;: @&quot;&quot;,</div><div class="line">                                            @&quot;Authorization&quot;: @&quot;&quot;,</div><div class="line">                                            @&quot;Connection&quot;: @&quot;&quot;,</div><div class="line">                                            @&quot;User-Agent&quot;: @&quot;&quot;&#125;;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>可以发现字典中的key都是标准的HTTP请求头的key，可以通过这种方式对请求头进行自定义配置</p>
</li>
<li><p><strong>#2</strong>：创建了NSURLSession对象，依赖于三个参数</p>
<ul>
<li><strong>NSURLSessionConfiguration</strong>：配置</li>
<li><strong>Delegate</strong>：代理对象</li>
<li><strong>DelegateQueue</strong>：代理队列，在NSURLConnection中往往需要指定代理队列，代表回调方法在哪个线程中执行，NSURLSession提供了类初始化方法，省略了代理队列的指定，默认为主线程的主队列</li>
</ul>
<p>除了这种方式之外，还可以通过单例模式提供的类方法创建，内部实现可能没有设置代理和代理队列，采用的是默认配置</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">@property (class, readonly, strong) NSURLSession *sharedSession;</div></pre></td></tr></table></figure>
<p>  这里的session使用了delegate回调，苹果还提供了block回调的形式：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">NSURLSessionDataTask *task = [session dataTaskWithURL:[[NSURL alloc]initWithString:@&quot;&quot;]</div><div class="line">                                    completionHandler:^(NSData * _Nullable data, NSURLResponse * _Nullable response, NSError * _Nullable error) &#123;</div><div class="line">                                        </div><div class="line">                                    &#125;];</div></pre></td></tr></table></figure>
</li>
<li><p><strong>#3</strong>：创建NSURLSessionTask对象，NSURLSession提供了这几种task类型</p>
<ul>
<li>NSURLSessionTask：超类，一般不具体使用</li>
<li>NSURLSessionDataTask：请求</li>
<li>NSURLSessionUploadTask：上传</li>
<li>NSURLSessionDownloadTask：下载</li>
</ul>
<p>它们之间的继承关系如下：<br><img src="http://upload-images.jianshu.io/upload_images/2070409-6d26f92b927eda6f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
</li>
</ul>
<p><strong>总结</strong>：NSURLSession的设计主要有三个部分，三个部分相互独立又具有联系，<strong>NSURLSessionConfiguration</strong>进行配置管理。<strong>NSURLSession</strong>将配置，代理，代理队列等对象关联，用于创建任务。<strong>NSURLSessionTask</strong>是任务类，其对象具有操作该任务的各种方法，启动，暂停等，同时任务的回调提供两种方式，block和代理。</p>
<h4 id="二、AFNetworking的封装设计"><a href="#二、AFNetworking的封装设计" class="headerlink" title="二、AFNetworking的封装设计"></a>二、AFNetworking的封装设计</h4><p>这里先回忆一下在基本架构这篇文章中所提到的AFNetworking的使用代码被分为两个部分，第一个部分是初始化AFHTTPSessionManager对象，第二个部分是调用请求方法。<br><strong>先来看第一个部分</strong>，我们再次回顾一下方法的调用栈</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">- [AFHTTPSessionManager initWithBaseURL:]</div><div class="line">	- [AFHTTPSessionManager initWithBaseURL:sessionConfiguration:] // #1</div><div class="line">		- [AFURLSessionManager initWithSessionConfiguration:] // #2</div><div class="line">			- [NSURLSession sessionWithConfiguration:delegate:delegateQueue:]</div><div class="line">			- [AFJSONResponseSerializer serializer] </div><div class="line">			- [AFSecurityPolicy defaultPolicy] </div><div class="line">			- [AFNetworkReachabilityManager sharedManager] </div><div class="line">		- [AFHTTPRequestSerializer serializer] </div><div class="line">		- [AFJSONResponseSerializer serializer]</div></pre></td></tr></table></figure>
<p>我们顺着方法调用栈，看方法具体实现细节，从而理解AFNetworking是如何封装NSURLSession的</p>
<ul>
<li><p><strong>#1</strong>：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">- (instancetype)initWithBaseURL:(NSURL *)url</div><div class="line">           sessionConfiguration:(NSURLSessionConfiguration *)configuration</div><div class="line">&#123;</div><div class="line">    self = [super initWithSessionConfiguration:configuration]; // &amp;1</div><div class="line">    if (!self) &#123;</div><div class="line">        return nil;</div><div class="line">    &#125;</div><div class="line">    // Ensure terminal slash for baseURL path, so that NSURL +URLWithString:relativeToURL: works as expected</div><div class="line">    if ([[url path] length] &gt; 0 &amp;&amp; ![[url absoluteString] hasSuffix:@&quot;/&quot;]) &#123;</div><div class="line">        url = [url URLByAppendingPathComponent:@&quot;&quot;];</div><div class="line">    &#125;</div><div class="line">    self.baseURL = url;  // &amp;2</div><div class="line">    self.requestSerializer = [AFHTTPRequestSerializer serializer];</div><div class="line">    self.responseSerializer = [AFJSONResponseSerializer serializer];</div><div class="line">    return self;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>  <strong>&amp;1</strong>：这里调用了父类AFURLSessionManager的初始化方法<br>  <strong>&amp;2</strong>：设置了baseURL</p>
</li>
<li><p><strong>#2</strong>：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"> - (instancetype)initWithSessionConfiguration:(NSURLSessionConfiguration *)configuration &#123;</div><div class="line">    self = [super init];</div><div class="line">    if (!self) &#123;</div><div class="line">        return nil;</div><div class="line">    &#125;</div><div class="line">    if (!configuration) &#123;</div><div class="line">        configuration = [NSURLSessionConfiguration defaultSessionConfiguration]; // &amp;1</div><div class="line">    &#125;</div><div class="line">    self.sessionConfiguration = configuration;</div><div class="line">    // &amp;2</div><div class="line">    self.operationQueue = [[NSOperationQueue alloc] init];</div><div class="line">    self.operationQueue.maxConcurrentOperationCount = 1;</div><div class="line">    self.session = [NSURLSession sessionWithConfiguration:self.sessionConfiguration delegate:self delegateQueue:self.operationQueue]; // &amp;3</div><div class="line">    // &amp;4</div><div class="line">    self.responseSerializer = [AFJSONResponseSerializer serializer];</div><div class="line">    self.securityPolicy = [AFSecurityPolicy defaultPolicy];</div><div class="line">#if !TARGET_OS_WATCH</div><div class="line">    self.reachabilityManager = [AFNetworkReachabilityManager sharedManager];</div><div class="line">#endif</div><div class="line">    self.mutableTaskDelegatesKeyedByTaskIdentifier = [[NSMutableDictionary alloc] init];</div><div class="line">    self.lock = [[NSLock alloc] init];</div><div class="line">    self.lock.name = AFURLSessionManagerLockName;</div><div class="line">    // &amp;5</div><div class="line">    [self.session getTasksWithCompletionHandler:^(NSArray *dataTasks, NSArray *uploadTasks, NSArray *downloadTasks) &#123;</div><div class="line">        for (NSURLSessionDataTask *task in dataTasks) &#123;</div><div class="line">            [self addDelegateForDataTask:task uploadProgress:nil downloadProgress:nil completionHandler:nil];</div><div class="line">        &#125;</div><div class="line">        for (NSURLSessionUploadTask *uploadTask in uploadTasks) &#123;</div><div class="line">            [self addDelegateForUploadTask:uploadTask progress:nil completionHandler:nil];</div><div class="line">        &#125;</div><div class="line">        for (NSURLSessionDownloadTask *downloadTask in downloadTasks) &#123;</div><div class="line">            [self addDelegateForDownloadTask:downloadTask progress:nil destination:nil completionHandler:nil];</div><div class="line">        &#125;</div><div class="line">    &#125;];</div><div class="line">    return self;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>  <strong>&amp;1</strong>：确定配置对象（原生调用）<br>  <strong>&amp;2</strong>：设置一个队列，并设置为串行（最大并发为1），在&amp;3中创建session的时候作为参数（由于AFNetworking将AFURLSessionManager类作为了NSURLSession的代理，所以这里另外添加一个在子线程中的操作队列）<br>  <strong>&amp;3</strong>：创建NSURLSession对象（原生调用）<br>  <strong>&amp;4</strong>：设置AFNetworking中的序列化和安全策略（AF自己的模块封装）<br>  <strong>&amp;5</strong>：为每个task添加一个AF封装的Delegate，后文会提到</p>
</li>
</ul>
<p><strong>总结第一部分</strong><br>从上面的代码细节来看，AFHTTPSessionManager的初始化操作就是做了这些事情：</p>
<ul>
<li>获得了NSURLSessionConfiguration对象</li>
<li>创建了NSURLSession对象，并设置自身为代理类，添加了操作队列</li>
<li><p>设置了AF自己封装的序列化和安全策略</p>
<p>这样一来，就很容易看出，其实就是在原生的初始化操作上添加了一些AF自己封装的策略对象</p>
</li>
</ul>
<p><strong>接下来再看看第二部分</strong>，同样回顾一下调用栈<br>使用<code>GET:parameters:process:success:failure:</code>方法作为例子来查看一下源码实现</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">- [AFHTTPSessionManager GET:parameters:process:success:failure:] // #1</div><div class="line">	- [AFHTTPSessionManager dataTaskWithHTTPMethod:parameters:uploadProgress:downloadProgress:success:failure:] // #2</div><div class="line">		- [AFHTTPRequestSerializer requestWithMethod:URLString:parameters:error:] </div><div class="line">		- [AFURLSessionManager dataTaskWithRequest:uploadProgress:downloadProgress:completionHandler:]  // #3</div><div class="line">			- [NSURLSession dataTaskWithRequest:]</div><div class="line">			- [AFURLSessionManager addDelegateForDataTask:uploadProgress:downloadProgress:completionHandler:] // #4</div><div class="line">				- [AFURLSessionManagerTaskDelegate init]</div><div class="line">				- [AFURLSessionManager setDelegate:forTask:] // #5</div><div class="line">	- [NSURLSessionDataTask resume]</div></pre></td></tr></table></figure>
<ul>
<li><p><strong>#1</strong>：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">- (NSURLSessionDataTask *)GET:(NSString *)URLString</div><div class="line">                   parameters:(id)parameters</div><div class="line">                     progress:(void (^)(NSProgress * _Nonnull))downloadProgress</div><div class="line">                      success:(void (^)(NSURLSessionDataTask * _Nonnull, id _Nullable))success</div><div class="line">                      failure:(void (^)(NSURLSessionDataTask * _Nullable, NSError * _Nonnull))failure</div><div class="line">&#123;</div><div class="line"></div><div class="line">    NSURLSessionDataTask *dataTask = [self dataTaskWithHTTPMethod:@&quot;GET&quot;</div><div class="line">                                                        URLString:URLString</div><div class="line">                                                       parameters:parameters</div><div class="line">                                                   uploadProgress:nil</div><div class="line">                                                 downloadProgress:downloadProgress</div><div class="line">                                                          success:success</div><div class="line">                                                          failure:failure];</div><div class="line"></div><div class="line">    [dataTask resume];</div><div class="line"></div><div class="line">    return dataTask;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>从表层能够看出返回了一个NSURLSessionDataTask对象，并且调用了resume操作（和原生一样），我们接着看下返回对象的方法是如何实现的</p>
</li>
</ul>
<ul>
<li><p><strong>#2</strong>：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"> - (NSURLSessionDataTask *)dataTaskWithHTTPMethod:(NSString *)method</div><div class="line">                                       URLString:(NSString *)URLString</div><div class="line">                                      parameters:(id)parameters</div><div class="line">                                  uploadProgress:(nullable void (^)(NSProgress *uploadProgress)) uploadProgress</div><div class="line">                                downloadProgress:(nullable void (^)(NSProgress *downloadProgress)) downloadProgress</div><div class="line">                                         success:(void (^)(NSURLSessionDataTask *, id))success</div><div class="line">                                         failure:(void (^)(NSURLSessionDataTask *, NSError *))failure</div><div class="line">&#123;</div><div class="line">    NSError *serializationError = nil;</div><div class="line">    NSMutableURLRequest *request = [self.requestSerializer requestWithMethod:method URLString:[[NSURL URLWithString:URLString relativeToURL:self.baseURL] absoluteString] parameters:parameters error:&amp;serializationError]; // &amp;1</div><div class="line">    if (serializationError) &#123;</div><div class="line">        if (failure) &#123;</div><div class="line">#pragma clang diagnostic push</div><div class="line">#pragma clang diagnostic ignored &quot;-Wgnu&quot;</div><div class="line">            dispatch_async(self.completionQueue ?: dispatch_get_main_queue(), ^&#123;</div><div class="line">                failure(nil, serializationError);</div><div class="line">            &#125;);</div><div class="line">#pragma clang diagnostic pop</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        return nil;</div><div class="line">    &#125;</div><div class="line">    // &amp;2</div><div class="line">    __block NSURLSessionDataTask *dataTask = nil;</div><div class="line">    dataTask = [self dataTaskWithRequest:request</div><div class="line">                          uploadProgress:uploadProgress</div><div class="line">                        downloadProgress:downloadProgress</div><div class="line">                       completionHandler:^(NSURLResponse * __unused response, id responseObject, NSError *error) &#123;</div><div class="line">        if (error) &#123;</div><div class="line">            if (failure) &#123;</div><div class="line">                failure(dataTask, error);</div><div class="line">            &#125;</div><div class="line">        &#125; else &#123;</div><div class="line">            if (success) &#123;</div><div class="line">                success(dataTask, responseObject);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;];</div><div class="line"></div><div class="line">    return dataTask;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>  <strong>&amp;1</strong>：创建了NSURLRequest，可以发现AF内部是通过Request的方式创建的task，而不是URL<br>  <strong>&amp;2</strong>：调用另外一个方法返回task对象</p>
</li>
<li><p><strong>#3</strong>：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">  - (NSURLSessionDataTask *)dataTaskWithRequest:(NSURLRequest *)request</div><div class="line">                               uploadProgress:(nullable void (^)(NSProgress *uploadProgress)) uploadProgressBlock</div><div class="line">                             downloadProgress:(nullable void (^)(NSProgress *downloadProgress)) downloadProgressBlock</div><div class="line">                            completionHandler:(nullable void (^)(NSURLResponse *response, id _Nullable responseObject,  NSError * _Nullable error))completionHandler &#123;</div><div class="line"></div><div class="line">    __block NSURLSessionDataTask *dataTask = nil;</div><div class="line">    url_session_manager_create_task_safely(^&#123;</div><div class="line">        dataTask = [self.session dataTaskWithRequest:request]; // &amp;1</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    [self addDelegateForDataTask:dataTask uploadProgress:uploadProgressBlock downloadProgress:downloadProgressBlock completionHandler:completionHandler]; // &amp;2</div><div class="line"></div><div class="line">    return dataTask;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>  <strong>&amp;1</strong>：这部分就很熟悉了，利用原生的方式通过request来创建task对象，然后返回。到这里，就已经能明白关于task对象是如何被封装返回的<br>  <strong>&amp;2</strong>：按照名字来看，这里好像是为task对象添加代理方法的，我们继续往下研究</p>
</li>
<li><p><strong>#4</strong>：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">  - (void)addDelegateForDataTask:(NSURLSessionDataTask *)dataTask</div><div class="line">                uploadProgress:(nullable void (^)(NSProgress *uploadProgress)) uploadProgressBlock</div><div class="line">              downloadProgress:(nullable void (^)(NSProgress *downloadProgress)) downloadProgressBlock</div><div class="line">             completionHandler:(void (^)(NSURLResponse *response, id responseObject, NSError *error))completionHandler</div><div class="line">&#123;</div><div class="line">    // &amp;1</div><div class="line">    AFURLSessionManagerTaskDelegate *delegate = [[AFURLSessionManagerTaskDelegate alloc] init];</div><div class="line">    delegate.manager = self;</div><div class="line">    delegate.completionHandler = completionHandler;</div><div class="line"></div><div class="line">    dataTask.taskDescription = self.taskDescriptionForSessionTasks;</div><div class="line">    [self setDelegate:delegate forTask:dataTask]; // &amp;2</div><div class="line">    // &amp;3</div><div class="line">    delegate.uploadProgressBlock = uploadProgressBlock;</div><div class="line">    delegate.downloadProgressBlock = downloadProgressBlock;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>  <strong>&amp;1</strong>：新建了一个AFURLSessionManagerTaskDelegate对象，是AF自己封装的代理对象<br>  <strong>&amp;2</strong>：看样子还需要进一步查看设置代理的细节，这一个方法传入了代理对象和task对象，我们继续看<br>  <strong>&amp;3</strong>：将block赋值给delegate的block属性，方便回调</p>
</li>
<li><p><strong>#5</strong>：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">  - (void)setDelegate:(AFURLSessionManagerTaskDelegate *)delegate</div><div class="line">            forTask:(NSURLSessionTask *)task</div><div class="line">&#123;</div><div class="line">    NSParameterAssert(task);</div><div class="line">    NSParameterAssert(delegate);</div><div class="line"></div><div class="line">    [self.lock lock]; // &amp;1</div><div class="line">    self.mutableTaskDelegatesKeyedByTaskIdentifier[@(task.taskIdentifier)] = delegate; // &amp;2</div><div class="line">    [delegate setupProgressForTask:task];</div><div class="line">    [self addNotificationObserverForTask:task];</div><div class="line">    [self.lock unlock];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>  <strong>&amp;1</strong>：有个加锁操作，保证线程安全<br>  <strong>&amp;2</strong>：用task的taskIdentifiier属性为key，delegate为value来进行对应，到这里，可以知道AF是用字典将delegate和task一一对应的</p>
</li>
</ul>
<p><strong>总结第二部分</strong>：<br>通过上面的分析，可以看出第二部分实际上就是利用NSURLRequest去创建NSURLSessionTask对象。同时呢，AFURLSessionManager作为了NSURLSession的代理，AF内部自定义了一个AFURLSessionManagerTaskDelegate代理类，该类具有很多block属性。并且，AF在内部实现了NSURLSession的代理方法，方法实现中实现block赋值，代理类的block属性对外暴露，在合适的地方回调。AF将很多NSRULSession中的代理方法都变成block形式进行暴露，更加简洁。<br><img src="http://upload-images.jianshu.io/upload_images/2070409-9a342c8e6fe26da5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;AFNetworking是一个非常简洁的框架，关于基本架构，可以看看&lt;a href=&quot;http://www.jianshu.com/p/4f8333ee3879&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这篇文章&lt;/a&gt;，本文主要阐述AFNetworking在设计上是如何对NSURLSession封装的。本文大致分为两个部分，第一个部分为NSURLSession的设计，第二个部分为AFNetworking的封装设计&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>iOS核心动画</title>
    <link href="http://www.nineteen.me/2017/07/24/iOS%E6%A0%B8%E5%BF%83%E5%8A%A8%E7%94%BB/"/>
    <id>http://www.nineteen.me/2017/07/24/iOS核心动画/</id>
    <published>2017-07-24T07:48:45.000Z</published>
    <updated>2017-07-24T11:54:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>动画是iOS中非常有趣的部分，同时也是提升用户交互体验的有力工具，本文主要分为两个部分，第一个部分讲解基础知识，第二个部分列举基本使用<br><a id="more"></a></p>
<h4 id="一、基础知识"><a href="#一、基础知识" class="headerlink" title="一、基础知识"></a>一、基础知识</h4><h5 id="1-1、动画相关框架"><a href="#1-1、动画相关框架" class="headerlink" title="1.1、动画相关框架"></a>1.1、动画相关框架</h5><p><img src="http://upload-images.jianshu.io/upload_images/2070409-6dd0ef1b06e4a6f6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>从上图可以发现</p>
<ul>
<li>UIView在最上层</li>
<li>往下依次是CoreAnimation</li>
<li>CoreGraphics、Hardware</li>
</ul>
<h5 id="1-2、iOS系统框架"><a href="#1-2、iOS系统框架" class="headerlink" title="1.2、iOS系统框架"></a>1.2、iOS系统框架</h5><p><img src="http://upload-images.jianshu.io/upload_images/2070409-a678b1c3b50c6835.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>上图为iOS中的四层架构</p>
<ul>
<li><strong>UIView</strong>位于Cocoa Touch层</li>
<li><strong>CoreAnimation</strong>位于Media Layer中的QuartzCore框架中，查看QuartzCore的头文件可以发现，只引入了CoreAnimation。<strong>CALayer</strong>这个熟悉的对象是在CoreAnimation中，CoreAnimation往往作用于CALayer而不是UIView</li>
<li><strong>Core Graphics</strong>也是在Media Layer层中的框架</li>
</ul>
<h5 id="1-3、UIView、QuartzCore和CoreGraphics之间的关系"><a href="#1-3、UIView、QuartzCore和CoreGraphics之间的关系" class="headerlink" title="1.3、UIView、QuartzCore和CoreGraphics之间的关系"></a>1.3、UIView、QuartzCore和CoreGraphics之间的关系</h5><ul>
<li><strong>UIView</strong>：主要负责事件响应、页面展示和与RunLoop相关操作</li>
<li><strong>QuartzCore</strong>：不单负责动画的创建和执行，还会将图形图像最终显示到屏幕上（本质上是CoreAnimation通过OpenGLES来做的）</li>
<li><strong>CoreGraphics</strong>：是一个基于C的库函数的高级绘画引擎，负责创建最终显示到屏幕上的数据模型</li>
</ul>
<h5 id="1-4、UIView和CALayer的协同"><a href="#1-4、UIView和CALayer的协同" class="headerlink" title="1.4、UIView和CALayer的协同"></a>1.4、UIView和CALayer的协同</h5><ul>
<li>UIView都拥有一个CALayer，CALayer将UIView设置为了自己的代理对象</li>
<li>对于CALayer对象，改变其属性，都会触发一个简单动画</li>
<li>UIView禁止在默认情况下禁止了CALayer的动画，所以我们在改变UIView的属性的时候，不会触发动画，而在UIView的动画block中，我们又能产生动画，在原理上为：一个可动画的CALayer属性改变的时候，都会寻找并运行一个合适的改变，这个改变是CAAction对象，而UIView的CALayer对象会询问他的delegate，即UIView，询问提供一个CAAction对象，delegate可以通过下面三种方式之一进行响应<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">1、它可以返回一个动作对象，这种情况下 layer 将使用这个动作。</div><div class="line">2、它可以返回一个 nil， 这样 layer 就会到其他地方继续寻找。</div><div class="line">3、它可以返回一个 NSNull 对象，告诉 layer 这里不需要执行一个动作，搜索也会就此停止。</div></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="1-5、UIView和CALayer的关系"><a href="#1-5、UIView和CALayer的关系" class="headerlink" title="1.5、UIView和CALayer的关系"></a>1.5、UIView和CALayer的关系</h5><ul>
<li>UIView的属性只是简单地返回了CALayer对象的属性</li>
<li>UIView作为CALayer的代理，负责事件处理功能，CALayer负责页面绘制（前面也提到了CoreAnimation的作用）</li>
</ul>
<h4 id="二、基本使用"><a href="#二、基本使用" class="headerlink" title="二、基本使用"></a>二、基本使用</h4><h5 id="2-1、Core-Animation类图"><a href="#2-1、Core-Animation类图" class="headerlink" title="2.1、Core Animation类图"></a>2.1、Core Animation类图</h5><p><img src="http://upload-images.jianshu.io/upload_images/2070409-d1060614eb08a72b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<h5 id="2-2、类别"><a href="#2-2、类别" class="headerlink" title="2.2、类别"></a>2.2、类别</h5><p>我们常用到的为下面四种：</p>
<ul>
<li><strong>CAAnimationGroup</strong>：动画组，将不同类型的动画同时进行或者连续进行</li>
<li><strong>CABasicAnimation</strong>：基本动画，包括一些基本属性的动画，例如位移、缩放、渐变等</li>
<li><strong>CAKeyFrameAnimation</strong>：关键帧动画，连续进行多个阶段的动画</li>
<li><strong>CATransition</strong>：过渡动画</li>
</ul>
<p>除了上面四种，还有一种是iOS9之后提供的弹簧动画<strong>CASpringAnimation</strong><br>另外，CoreGraphics中提供了<strong>仿射变化动画</strong>，可以很方便地进行一些基本动画操作</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;动画是iOS中非常有趣的部分，同时也是提升用户交互体验的有力工具，本文主要分为两个部分，第一个部分讲解基础知识，第二个部分列举基本使用&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Masonry中的优先级</title>
    <link href="http://www.nineteen.me/2017/07/01/Masonry%E4%B8%AD%E7%9A%84%E4%BC%98%E5%85%88%E7%BA%A7/"/>
    <id>http://www.nineteen.me/2017/07/01/Masonry中的优先级/</id>
    <published>2017-07-01T11:45:40.000Z</published>
    <updated>2017-07-24T11:27:27.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="可能标题不能够完全解释清楚本文到底要描述什么，没关系，我们来举出一个实际的例子，看下图："><a href="#可能标题不能够完全解释清楚本文到底要描述什么，没关系，我们来举出一个实际的例子，看下图：" class="headerlink" title="可能标题不能够完全解释清楚本文到底要描述什么，没关系，我们来举出一个实际的例子，看下图："></a>可能标题不能够完全解释清楚本文到底要描述什么，没关系，我们来举出一个实际的例子，看下图：</h3><p><img src="http://upload-images.jianshu.io/upload_images/2070409-595fda6c03a18609.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<h5 id="红框中的我们发现在第一行一共有三个控件，一个是标题的UILabel（表示为：headLineTabel），一个是宝石的图标UIImageView（表示为：diamondImageView），再有一个是宝石的数量UILabel（表示为：diamondLabel），这时候我们用Masonry编写代码的时候往往一般是这样的思路："><a href="#红框中的我们发现在第一行一共有三个控件，一个是标题的UILabel（表示为：headLineTabel），一个是宝石的图标UIImageView（表示为：diamondImageView），再有一个是宝石的数量UILabel（表示为：diamondLabel），这时候我们用Masonry编写代码的时候往往一般是这样的思路：" class="headerlink" title="红框中的我们发现在第一行一共有三个控件，一个是标题的UILabel（表示为：headLineTabel），一个是宝石的图标UIImageView（表示为：diamondImageView），再有一个是宝石的数量UILabel（表示为：diamondLabel），这时候我们用Masonry编写代码的时候往往一般是这样的思路："></a>红框中的我们发现在第一行一共有三个控件，一个是标题的UILabel（表示为：headLineTabel），一个是宝石的图标UIImageView（表示为：diamondImageView），再有一个是宝石的数量UILabel（表示为：diamondLabel），这时候我们用Masonry编写代码的时候往往一般是这样的思路：</h5><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 钻石数量label</span></div><div class="line">[<span class="keyword">self</span>.contentView addSubview:<span class="keyword">self</span>.diamondLabel];</div><div class="line">[<span class="keyword">self</span>.diamondLabel mas_makeConstraints:^(MASConstraintMaker *make) &#123;</div><div class="line">    make.right.equalTo(<span class="keyword">self</span>.contentView).with.offset(<span class="number">-13</span> * AutoLayoutScaleX);</div><div class="line">    make.top.equalTo(<span class="keyword">self</span>.contentView).with.offset(<span class="number">13</span> * AutoLayoutScaleY);</div><div class="line">    </div><div class="line">&#125;];</div><div class="line"></div><div class="line"><span class="comment">// 钻石imageView</span></div><div class="line">[<span class="keyword">self</span>.contentView addSubview:<span class="keyword">self</span>.diamondImageView];</div><div class="line">[<span class="keyword">self</span>.diamondImageView mas_makeConstraints:^(MASConstraintMaker *make) &#123;</div><div class="line">    make.right.equalTo(<span class="keyword">self</span>.diamondLabel.mas_left).with.offset(<span class="number">-2</span> * AutoLayoutScaleX);</div><div class="line">    make.centerY.equalTo(<span class="keyword">self</span>.diamondLabel);</div><div class="line">&#125;];</div><div class="line"></div><div class="line"><span class="comment">// 标题label</span></div><div class="line">[<span class="keyword">self</span>.contentView addSubview:<span class="keyword">self</span>.headLineLabel];</div><div class="line">[<span class="keyword">self</span>.headLineLabel mas_makeConstraints:^(MASConstraintMaker *make) &#123;</div><div class="line">    make.left.equalTo(<span class="keyword">self</span>.contentView).with.offset(<span class="number">10</span> * AutoLayoutScaleX);</div><div class="line">    make.centerY.equalTo(<span class="keyword">self</span>.diamondLabel);</div><div class="line">&#125;];</div></pre></td></tr></table></figure>
<h5 id="但是这样的布局所造成的效果肯定不可能是上图所示，因为headLineLabel和diamondImageView之间没有设置约束，所以如果headLine的长度过于长，将会和diamondImageView相互重叠，本文就是要讲解解决这个问题的方法。"><a href="#但是这样的布局所造成的效果肯定不可能是上图所示，因为headLineLabel和diamondImageView之间没有设置约束，所以如果headLine的长度过于长，将会和diamondImageView相互重叠，本文就是要讲解解决这个问题的方法。" class="headerlink" title="但是这样的布局所造成的效果肯定不可能是上图所示，因为headLineLabel和diamondImageView之间没有设置约束，所以如果headLine的长度过于长，将会和diamondImageView相互重叠，本文就是要讲解解决这个问题的方法。"></a>但是这样的布局所造成的效果肯定不可能是上图所示，因为headLineLabel和diamondImageView之间没有设置约束，所以如果headLine的长度过于长，将会和diamondImageView相互重叠，本文就是要讲解解决这个问题的方法。</h5><ul>
<li><p><strong>问题出现原因</strong></p>
<ol>
<li>没有直接对带有文字的UILabel进行宽度的约束</li>
<li>两个会相互重叠的控件之间没有设置约束</li>
</ol>
</li>
<li><p><strong>思考</strong></p>
<ol>
<li>先来试试直接对UILable计算宽度来进行写死的约束，这样的话我也应该将其他控件的宽度也写死才能成功编译，但是这样我就需要算好两个控件的宽度，而最好的其实是不限制他们，让他们自己知道怎么“谦让”对方</li>
<li>在两个控件之间设置约束，由于宽度都没有限制，所以这样写，从原理上分析，是肯定会报错的（当然实际也会报错）</li>
<li>问题已经由上面两个点抛出，那么实际上解决这个问题的方法是设置各个控件的优先级，让他们自己知道自己是什么样的地位的，低地位的控件需要谦让高地位的控件，让高地位的控件优先将自己显示完全</li>
</ol>
</li>
<li><p><strong>解决办法</strong></p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 标题label</span></div><div class="line">    [<span class="keyword">self</span>.contentView addSubview:<span class="keyword">self</span>.headLineLabel];</div><div class="line">    [<span class="keyword">self</span>.headLineLabel mas_makeConstraints:^(MASConstraintMaker *make) &#123;</div><div class="line">        make.left.equalTo(<span class="keyword">self</span>.contentView).with.offset(<span class="number">10</span> * AutoLayoutScaleX);</div><div class="line">        make.centerY.equalTo(<span class="keyword">self</span>.diamondLabel);</div><div class="line">        make.right.mas_lessThanOrEqualTo(<span class="keyword">self</span>.diamondLabel.mas_left).with.offset(<span class="number">-5</span> * AutoLayoutScaleX);</div><div class="line">    &#125;];</div><div class="line"><span class="comment">// 设置优先级</span></div><div class="line">    [<span class="keyword">self</span>.diamondImageView setContentCompressionResistancePriority:<span class="built_in">UILayoutPriorityRequired</span> forAxis:<span class="built_in">UILayoutConstraintAxisHorizontal</span>];</div><div class="line">    [<span class="keyword">self</span>.diamondLabel setContentCompressionResistancePriority:<span class="built_in">UILayoutPriorityRequired</span> forAxis:<span class="built_in">UILayoutConstraintAxisHorizontal</span>];</div><div class="line"></div><div class="line">    [<span class="keyword">self</span>.headLineLabel setContentCompressionResistancePriority:<span class="built_in">UILayoutPriorityDefaultLow</span> forAxis:<span class="built_in">UILayoutConstraintAxisHorizontal</span>];</div></pre></td></tr></table></figure>
</li>
<li><p><strong>代码分析和解释</strong></p>
<ol>
<li>在headLineLabel的布局中添加了一个约束，即为headLineLabel和diamondImageView之间的约束，但是所使用的不是equalTo，而是mas_lessThanOrEqualTo，表示极限的情况是等于，一般来说是小于</li>
<li>优先级函数：<ul>
<li>第一个参数：通俗来讲，不同的优先级，表示显示的完整性的高低，优先级越高，那么在父控件无法在无越界的情况下的情况下，就会优先先把优先级高的控件显示完整，然后再依次显示优先级低的</li>
<li>第二个参数：代表在什么方向上进行优先级限制</li>
</ul>
</li>
</ol>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;可能标题不能够完全解释清楚本文到底要描述什么，没关系，我们来举出一个实际的例子，看下图：&quot;&gt;&lt;a href=&quot;#可能标题不能够完全解释清楚本文到底要描述什么，没关系，我们来举出一个实际的例子，看下图：&quot; class=&quot;headerlink&quot; title=&quot;可能标题
    
    </summary>
    
    
  </entry>
  
</feed>
